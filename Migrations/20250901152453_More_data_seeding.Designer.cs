// <auto-generated />
using System;
using EventsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901152453_More_data_seeding")]
    partial class More_data_seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("CategoryEvent");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            EventsId = 1
                        },
                        new
                        {
                            CategoriesId = 2,
                            EventsId = 2
                        },
                        new
                        {
                            CategoriesId = 3,
                            EventsId = 3
                        },
                        new
                        {
                            CategoriesId = 4,
                            EventsId = 4
                        });
                });

            modelBuilder.Entity("EventsManager.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EventsManager.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EventId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("EventsManager.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Food & Drink"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Film & TV"
                        });
                });

            modelBuilder.Entity("EventsManager.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An evening of smooth jazz.",
                            LocationID = 1,
                            Name = "Jazz Concert"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Showcasing modern art.",
                            LocationID = 2,
                            Name = "Art Exhibition"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Latest in tech innovations.",
                            LocationID = 3,
                            Name = "Tech Conference"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Local teams face off.",
                            LocationID = 1,
                            Name = "Football Match"
                        });
                });

            modelBuilder.Entity("EventsManager.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TemperatureC")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = 4,
                            Name = "San Francisco"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Miami"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Seattle"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Austin"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Boston"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 12,
                            Name = "London"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Vancouver"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Melbourne"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Helsinki"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Brussels"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Zurich"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Lisbon"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Prague"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Warsaw"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Bangkok"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Sao Paulo"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Lima"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Johannesburg"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Nairobi"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Hanoi"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Manila"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Tirana"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Skopje"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.HasOne("EventsManager.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsManager.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventsManager.Models.Attendance", b =>
                {
                    b.HasOne("EventsManager.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Attendances")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsManager.Models.Event", "Event")
                        .WithMany("Attendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsManager.Models.Event", b =>
                {
                    b.HasOne("EventsManager.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsManager.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventsManager.Models.ApplicationUser", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EventsManager.Models.Event", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EventsManager.Models.Location", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
